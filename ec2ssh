#!/bin/bash
# ec2ssh

cache='/tmp/ec2ssh.cache'

export AWS_DEFAULT_OUTPUT=json


info () { echo "[INFO]" $* ; }


check_dependencies () {
    if ! command -v jq > /dev/null ; then
        echo "Please install jq (https://stedolan.github.io/jq/)" ; exit 1
    fi
    if ! command -v fzf > /dev/null ; then
        echo "Please install fzf (https://github.com/junegunn/fzf)" ; exit 1
    fi
    if ! command -v aws > /dev/null ; then echo "Please install aws" ; exit 1 ; fi
    if ! aws --version | grep -q 'aws-cli/2' ; then
        echo "This tool requires aws-cli v2. Please upgrade."
        exit 1
    fi
}


usage () {
    cat <<.
Usage: $(basename "$0") [OPTIONS] [ENV_NAME]

Pick a host on environment ENV_NAME and connect to it.

With no ENV_NAME defaults to 'prod'.

    -h, --help      Show this message and exit.
    -f, --flush     Flush cached data.
    -l USER         Login with this username (as in 'ssh -l')
    --ssh           Force to connect using ssh.
    --mssh          Force to connect using mssh.

By default this tool connects using 'ssh'. If 'mssh' is found it will be used instead.
To use either 'ssh' or 'mssh' for all connections set this env var:

    EC2_SSH_BINARY=mssh

To change the default option just for one connection pass --ssh|--mssh option.
.
}

die() { echo "$*" >&2; exit 2; }            # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }
no_arg() { if [ -n "$OPTARG" ]; then die "No arg allowed for --$OPT option"; fi; }

parse_opts () {
    # Default values.
    env="prod"
    ssh_user=""

    # Parse arguments. Supports long options on Linux and MacOS (without getopt).
    # https://stackoverflow.com/a/28466267
    while getopts u,h,f,l:,-: OPT; do
      if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
        OPT="${OPTARG%%=*}"       # extract long option name
        OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
        OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
      fi
      case "$OPT" in
        u | usage )     usage && exit ;;
        h | help )      usage && exit ;;
        f | flush )     no_arg; flush_cache && exit ;;
        l )             needs_arg; ssh_user="$OPTARG" ;;
        ssh )           no_arg; force_ssh="true" ;;
        mssh )          no_arg; force_mssh="true" ;;
        ??* )           die "Illegal option --$OPT" ;;  # bad long option
        \? )            exit 2 ;;  # bad short option (error reported via getopts)
      esac
    done
    shift $((OPTIND-1)) # remove parsed options and args from $@ list

    # Finish if received some unknown option.
    if [ $# != 0 ] ; then env="$*" ; fi
}


get_ec2roles () {
    # Retrieves all EC2 tags "Role"
    aws ec2 describe-instances --no-paginate \
        --query "Reservations[].Instances" \
        --filters "Name=tag:Env,Values=${env}" "Name=instance-state-name,Values=running" \
        --profile ${env} \
    | jq -r '.[][].Tags[] | select(.Key=="Role") | .Value' \
    | sort | uniq
}


flush_cache () {
    rm -f ${cache}/*.roles
}


ec2roles () {
    # create cache dir, if needed.
    [ -d ${cache} ] || mkdir ${cache}

    # Remove empty cache files.
    if [ ! -s "${cache}/${env}.roles" ] ; then
        rm -f "${cache}/${env}.roles"
    fi
    if [ ! -f "${cache}/${env}.roles" ] ; then
        get_ec2roles > "${cache}/${env}.roles"
    fi
    fzf --prompt "(${env}) Role> " < "${cache}/${env}.roles"
}


ec2instances () {
    aws ec2 describe-instances --no-paginate \
        --filters "Name=tag:Env,Values=${env}" "Name=tag:Role,Values=${role}" \
                  "Name=instance-state-name,Values=running" \
        --query "Reservations[].Instances" \
        --profile ${env}
}


jq_name_and_ip () {
    cat <<.
        .[][] |
        # enrich all tags with IP address
        .Tags[] + { "Ip": .PrivateIpAddress, "InstanceId": .InstanceId, "LaunchTime": .LaunchTime } |
        # keep only tags with Key="Name"
        select(.Key=="Name") |
        [ .Value, .Ip, .InstanceId, .LaunchTime ] | @tsv
.
}


check_aws_credentials () {
    if ! aws sts get-caller-identity > /dev/null 2>&1 ; then
        echo "AWS identity validation failed. Check your AWS credentials."
        exit 1
    fi
}


use_mssh () {
    # Use the tool selected by command-line.
    if [ "${force_mssh}" = "true" ] ; then return 0 ; fi
    if [ "${force_ssh}" = "true" ] ; then return 1 ; fi
    # Use the tool set in an environment variable.
    if [ "${EC2_SSH_BINARY}" = "mssh" ] ; then return 0 ; fi
    if [ "${EC2_SSH_BINARY}" = "ssh" ] ; then return 1 ; fi
    # If mssh is installed, use it.
    if command -v mssh > /dev/null ; then return 0 ; fi
    # Default to use ssh.
    return 1
}



check_dependencies
parse_opts "$@"
check_aws_credentials

role=$(ec2roles)
host_and_addr=$(ec2instances | jq -r -f <(jq_name_and_ip) \
    | sort -k4 -r | fzf -n1,2,3 --no-sort --prompt "(${env}) Host> ")
private_ip=$(echo "${host_and_addr}" | awk '{print $2}')
instance_id=$(echo "${host_and_addr}" | awk '{print $3}')

image_id=$(
    aws ec2 describe-instances \
    --filters "Name=instance-id,Values=${instance_id}" \
    --profile ${env} \
    | jq -r '.Reservations[].Instances[].ImageId')

if [ -z "${ssh_user}" ] ; then
    ami_name=$(aws ec2 describe-images --image-ids "${image_id}" --profile ${env} \
        | jq -r '.Images[]? | .Name,.Tags[]?.Value')
    ssh_user=$(
        if echo "${ami_name}" | grep -E -q -i 'ubuntu' ; then
            echo ubuntu
        else
            echo ec2-user
        fi
    )
fi

# Remove the local functions from global env.
unset -f jq_name_and_ip
unset -f ec2instances
unset -f ec2roles
unset -f get_ec2roles


info "Connecting to: ${host_and_addr}"

if use_mssh ; then
    ssh_cmd="mssh -t ${instance_id} ${ssh_user}@${private_ip} -u ${env}"
else
    ssh_cmd="ssh -l ${ssh_user} ${private_ip}"
fi

$ssh_cmd
